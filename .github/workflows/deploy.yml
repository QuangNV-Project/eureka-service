name: CI/CD Docker Deploy

on:
  push:
    branches:
      - main
      - dev  # dev branch dùng staging

jobs:
  # ================================================
  # 1️⃣ BUILD & PUSH DOCKER IMAGE
  # ================================================
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set image tag and Spring profile
        id: vars
        run: |
          BRANCH_NAME="${GITHUB_REF_NAME}"
          echo "Current branch: $BRANCH_NAME"
          
          if [[ "$BRANCH_NAME" == "main" ]]; then
            IMAGE_TAG="prod"
            SPRING_PROFILE="prod"
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            IMAGE_TAG="dev"
            SPRING_PROFILE="dev"
          else
            IMAGE_TAG="staging"
            SPRING_PROFILE="dev"
          fi

          # Lưu vào GITHUB_ENV cho các step sau
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "SPRING_PROFILE=$SPRING_PROFILE" >> $GITHUB_ENV
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          # Lưu vào outputs
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "spring_profile=$SPRING_PROFILE" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          echo "✅ Branch: $BRANCH_NAME"
          echo "✅ Image Tag: $IMAGE_TAG"
          echo "✅ Spring Profile: $SPRING_PROFILE"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Maven settings
        uses: s4u/maven-settings-action@v4.0.0
        with:
          servers: ${{ secrets.MAVEN_SERVERS }}

      - name: Copy Maven settings for Docker
        run: mkdir -p .m2 && cp ~/.m2/settings.xml .m2/settings.xml

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg SPRING_PROFILE=${{ env.SPRING_PROFILE }} \
            -t ${{ secrets.DOCKERHUB_IMAGE }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_IMAGE }}:${{ env.IMAGE_TAG }}

    outputs:
      image_tag: ${{ steps.vars.outputs.image_tag }}
      spring_profile: ${{ steps.vars.outputs.spring_profile }}
      branch_name: ${{ steps.vars.outputs.branch_name }}

  # ================================================
  # 2️⃣ CLEANUP LOCAL IMAGES (optional)
  # ================================================
  cleanup:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Cleanup local Docker images
        run: docker image prune -af

  # ================================================
  # 3️⃣ DEPLOY TO REMOTE SERVER
  # ================================================
  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
      BRANCH_NAME: ${{ needs.build.outputs.branch_name }}
    steps:
      - name: "[Deploy] Pull latest image on server"
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.REMOTE_SERVER }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          envs: IMAGE_TAG,BRANCH_NAME
          script: |
            cd ./root_project
            if [[ "$BRANCH_NAME" == "main" ]]; then
              ENV_FILE=".env.prod"
            else
              ENV_FILE=".env.dev"
            fi
            echo "Branch: $BRANCH_NAME"
            echo "Image Tag: $IMAGE_TAG"
            echo "ENV_FILE: $ENV_FILE"
            echo "Pulling latest image..."
            docker pull ${{ secrets.DOCKERHUB_IMAGE }}:$IMAGE_TAG

      - name: "[Deploy] Stop & remove old container"
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.REMOTE_SERVER }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          script: |
            docker stop eureka-service || true
            docker rm eureka-service || true

      - name: "[Deploy] Run new container"
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.REMOTE_SERVER }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          envs: IMAGE_TAG,BRANCH_NAME
          script: |
            cd ./root_project
            if [[ "$BRANCH_NAME" == "main" ]]; then
              ENV_FILE=".env.prod"
              PORT_VAR="EUREKA_SERVER_PORT"
            else
              ENV_FILE=".env.dev"
              PORT_VAR="EUREKA_SERVER_PORT"
            fi
            
            # Load environment file to get port
            source ./infra/$ENV_FILE
            eval "PORT=\$$PORT_VAR"
            
            echo "Branch: $BRANCH_NAME"
            echo "ENV_FILE: $ENV_FILE"
            echo "Port: $PORT"
            echo "Image Tag: $IMAGE_TAG"
            
            echo "Running new container..."
            docker run -d --name eureka-service \
              --env-file ./infra/$ENV_FILE \
              -p $PORT:$PORT \
              ${{ secrets.DOCKERHUB_IMAGE }}:$IMAGE_TAG
